path = File.expand_path(File.dirname(__FILE__))
$: << path unless $:.include? path

require "htmless"
require 'v8'

#cxt = V8::Context.new
#p cxt.eval(<<-JS)
#  var a = a || {};
#  JSON.stringify(a)
#JS

# TODO escape " generated by builder

class JSBuilder < Htmless::Standard
  strings_injector.strings.each do |key, value|
    if value =~ /"/
      strings_injector.replace key, value.gsub('"', '\"')
    end
  end
end

POOL = Htmless::Pool.new(JSBuilder)

class Injector # < BasicObject
  def initialize(name)
    @name, @methods = name, []
  end

  def [](key)
    method_missing(key)
  end

  def method_missing(name, *args, &block)
    @methods << name.to_s
    self
  end

  def __reset__!
    @methods.clear
  end

  def __name__
    @name
  end

  def to_s
    js = "{{#{@name}.#{@methods.join('.')}}}"
    __reset__!
    js
  end

  def to_str
    to_s
  end
end

module ToJs
  include Htmless::Helper

  def builder(name, &block)
    JsRenderers.add_renderer self, name, &block
    super name, &block
  end

  def as_json
    { :class => self.class.to_s, :data => json_data }
  end
end

class JsRenderersImpl
  def initialize
    @render_methods = { }
    @templates      = { }
  end

  def add_renderer(klass, name, &block)
    @render_methods[klass]       ||= { }
    @render_methods[klass][name] = block
  end

  def renderer(klass, name)
    @render_methods[klass][name]
  end

  def to_js
    @render_methods.each do |klass, names|
      @templates[klass] ||= { }
      names.each do |name, block|
        @templates[klass][name] = JsMethodBuilder.new(klass, name, block).build
      end
    end
    @templates
  end
end

class JsMethodBuilder
  attr_reader :klass, :name, :block, :builder

  def initialize(klass, name, block)
    @klass, @name, @block = klass, name, block
    @builder              = POOL.get
    @injectors            = Array.new(block.arity) { |i| Injector.new("arg#{i}") }
  end

  def build
    builder.raw head
    builder.dive(*@injectors, &block)
    builder.raw foot
    builder.to_html!.gsub(/\{\{([^}]*)\}\}/, '"+\1+"')
  ensure
    @builder = nil
  end

  def head
    <<-JS.chomp
var templates = templates || {};
templates["#{klass}"] = templates["#{klass}"] || {};
templates["#{klass}"].#{name} = function (#{@injectors.map(&:__name__).join(', ')}) {
  var _buf;
  _buf = "
    JS
  end

  def foot
    %(";\n  return _buf;\n};\n)
  end
end

JsRenderers = JsRenderersImpl.new

A = Module.new
class A::Record
  extend ToJs

  def name
    'a_record'
  end

  def klass
    'class'
  end

  def items
    [{ :name => 'a' }, { :name => 'b' }]
  end

  def json_data
    { :name  => name,
      :klass => klass,
      :items => items
    }
  end

  builder :content do |r|
    p :class => r.klass do
      text r.name
      #ul do
      #  r.items.each do |item|
      #    r.item self, item
      #  end
      #end
    end
  end

  builder :item do |_, item|
    li item[:name]
  end
end

record = A::Record.new

#puts POOL.get.render(record, :content).to_html!

puts JsRenderers.to_js[A::Record][:content]
puts JsRenderers.to_js[A::Record][:item]
