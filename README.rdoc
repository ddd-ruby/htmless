= hammer-render

== Syntax

Experimental html renderer with Markaby like syntax mixed with Wee::Brushes but faster

    Hammer::FormatedBuilder.new.go_in do
      xhtml5!
      html do
        head { title 'a title' }
        body do
          div.id('menu').class('left') do
            ul do
              li 'home'
              li 'contacts', :class => 'active'
            end
          end
          div.id('content') do
            article.id 'article1' do
              h1 'header'
              p('some text').class('centered')
              div(:class => 'like').class('hide').with do
                text 'like on '
                strong 'Facebook'
              end
            end
          end
        end
      end
    end.to_html
    #=>
    <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html>
    <html xmlns="http://www.w3.org/1999/xhtml">
      <head>
        <title>a title</title>
      </head>
      <body>
        <div id="menu" class="left">
          <ul>
            <li>home</li>
            <li class="active">contacts</li>
          </ul>
        </div>
        <div id="content">
          <article id="article1">
            <h1>header</h1>
            <p class="centered">some text</p>
            <div class="like hide">like on
              <strong>Facebook</strong>
            </div>
          </article>
        </div>
      </body>
    </html>


== Helpers

You can mix it directly to Builder's instance

  require 'active_support'
  require 'action_view'

  Hammer::FormatedBuilder.new.go_in do
    extend ActionView::Helpers::NumberHelper
    div number_with_precision(Math::PI, :precision => 4)
  end.to_html # => <div>3.1416</div>

or make your own Builder

  require 'active_support'
  require 'action_view'

  class MyBuilder < Hammer::FormatedBuilder
    include ActionView::Helpers::NumberHelper
  end

  MyBuilder.new.go_in do
    div number_with_precision(Math::PI, :precision => 4)
  end.to_html # => <div>3.1416</div>

== Extensibility

  class MyBuilder < Hammer::FormatedBuilder

    # define new method to all tags
    redefine_class :abstract_tag do
      def hide!
        self.class 'hidden'
      end
    end

    # add pseudo tag
    define_tag_class :component, :div do
      class_eval <<-RUBYCODE, __FILE__, __LINE__
        def open(id, attributes = nil, &block)
          super(attributes, &nil).id(id).class('component')
          block ? with(&block) : self
        end
      RUBYCODE
    end
  end

  MyBuilder.new.go_in do
    div[:content].with do
      span.id('secret').class('left').hide!
      component('component-1') do
        strong 'something'
      end
    end
  end.to_html

and result is

  <div id="content">
    <span id="secret" class="left hidden"></span>
    <div id="component-1" class="component">
      <strong>something</strong>
    </div>
  </div>


== Benchmark

                                  user     system      total        real
  render                   11.560000   0.020000  11.580000 ( 11.569825)
  render3                  20.240000   0.060000  20.300000 ( 20.284735)
  hammer-builder           19.480000   0.080000  19.560000 ( 19.559978)
  hammer-formated_builder  20.980000   0.060000  21.040000 ( 21.006379)
  erubis                   59.710000   0.260000  59.970000 ( 59.879180)
  erubis-cache             11.690000   0.030000  11.720000 ( 11.700362)
  fasterubis               53.110000   0.140000  53.250000 ( 53.163665)
  fasterubis-cache         11.630000   0.030000  11.660000 ( 11.643636)
  erector                  33.110000   0.070000  33.180000 ( 33.132933)
  markaby                  94.320000   0.260000  94.580000 ( 94.441182)
  tagz                    161.310000   0.160000 161.470000 (161.265090)
